//
//  ViewController.swift
//  LibraryCoreData
//
//  Created by Sebastian Strus on 2018-06-13.
//  Copyright Â© 2018 Sebastian Strus. All rights reserved.
//

import UIKit
import CoreData

class ViewController: UIViewController {
    
    @IBOutlet weak var passportDetailsLabel: UILabel!
    @IBOutlet weak var bookDetailsLabel: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        oneToOneExample()
        oneToManyExample()
    }
    
    func oneToOneExample(){
        
        /*insert start here*/
        let appD = UIApplication.shared.delegate as! AppDelegate
        let context = appD.persistentContainer.viewContext
        
        /*create Person object*/
        let author = Author(context: context)
        author.firstName = "Sebastian"
        author.lastName = "Strus"
        
        /*create Passport object*/
        let passport = Passport(context : context)
        passport.passportId = "123"
        
        author.passport = passport
        /*have to have use it to save data in store*/
        appD.saveContext()
        /*insert ends here*/
        
        
        /*fetch data from core data to get value*/
        let request = NSFetchRequest<NSFetchRequestResult>(entityName: "Author")
        
        do{
            let res = try context.fetch(request)//array of object [Person]
            
            let fetchedAuthor = res.first as? Author// let fetchedPerson = Person
            print(fetchedAuthor?.firstName ?? "")
            print(fetchedAuthor?.lastName ?? "")
            
            print(fetchedAuthor?.passport?.passportId ?? "")
            
            passportDetailsLabel.text = "One to one example -> " + author.firstName! + " " + author.lastName! + " " + "have passport with id " + (fetchedAuthor?.passport?.passportId)!
            
        }catch let error{
            print(error)
        }
        
    }
    
    func oneToManyExample(){
        /*insert start here*/
        let appD = UIApplication.shared.delegate as! AppDelegate
        let context = appD.persistentContainer.viewContext
        
        let author = Author(context: context)
        author.firstName = "Sebastian2"
        author.lastName = "Strus2"
        
        let b1 = Book(context : context)
        b1.title = "Best dogs"
        b1.publicationDate = Date(timeIntervalSince1970: 0)
        b1.pages = 300
        
        
        let b2 = Book(context : context)
        b2.title = "Best cats"
        b2.publicationDate = Date(timeIntervalSince1970: 0)
        b2.pages = 400
        
        
        /*when we create relationships, in visual editor, xcode autogenerated this method - addToVehicals*/
        author.addToHisBooks(b1)
        author.addToHisBooks(b2)
        
        
        appD.saveContext()
        /*insert ends here*/
        
        /*fetch data from core data to get value*/
        let request = NSFetchRequest<NSFetchRequestResult>(entityName: "Author")
        
        do{
            let res = try context.fetch(request)//array of object [Author]
            
            var aArray = [String]()
            
            /*fetch result can have more than one author objects*/
            for aAuthor in res {
                
                let obj = aAuthor as! Author
                
                
                /*a author can have more than one book*/
                for item in obj.hisBooks!
                {
                    let a = item as! Book
                    let title = a.title
                    let publicationDate = a.publicationDate
                    let pages = a.pages
                    
                    aArray.append(title!)
                    aArray.append("\(publicationDate!)")
                    aArray.append("\(pages)")
                }
            }
            
            print(aArray.debugDescription)
            
            bookDetailsLabel.text = ("One to many example -> Author \(author.firstName ?? "") \(author.lastName ?? "") \(aArray.description)")
            
        }catch let error{
            print(error)
        }
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}
